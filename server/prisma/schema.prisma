// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//MY USER
model User {
  id          Int           @id @default(autoincrement())
  login       String        @unique
  password    String
  uniqLogin   String?
  channelName String?
  email       String?
  ipAdr       String?
  country     String?
  city        String?
  browser     String?
  role        Roles         @default(USER)
  countPost   Int           @default(0)
  countVideo  Int           @default(0)
  countWatch  Int           @default(0)
  countSubs   Int           @default(0)
  countMySubs Int           @default(0)
  isOnline    Boolean       @default(false)
  premium     Boolean       @default(false)
  delete      Boolean       @default(false)
  bans        Boolean       @default(false)
  post        Post[]
  likes       LikePost[]
  coment      ComentPost[]
  mypodpiski  Subcribe[]    @relation("subId")
  myfolowers  Subcribe[]    @relation("userId")
  Video       Video[]
  videoL      LikeVideo[]
  videoC      ComentVideo[]
  files       Files[]
  myBanUser   Bans[]        @relation("banUserId")
  iBanUser    Bans[]        @relation("userIDS")
}

//MY Subcribe / SUBS
model Subcribe {
  id     Int  @id @default(autoincrement())
  user   User @relation("userId", fields: [userId], references: [id])
  userId Int
  sub    User @relation("subId", fields: [subId], references: [id])
  subId  Int
}

model Bans {
  id        Int  @id @default(autoincrement())
  user      User @relation("userIDS", fields: [userId], references: [id])
  userId    Int
  ban       User @relation("banUserId", fields: [userBanId], references: [id])
  userBanId Int
}

//POST
model Post {
  id          Int          @id @default(autoincrement())
  title       String?
  text        String?
  countLikes  Int          @default(0)
  countComent Int          @default(0)
  countWatch  Int          @default(0)
  imgAvatar   String?
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  delete      Boolean      @default(false)
  likes       LikePost[]
  coment      ComentPost[]
}

//LIKE POST
model LikePost {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int
  post   Post? @relation(fields: [postId], references: [id])
  postId Int
}

//COMETN POST
model ComentPost {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId Int
  post   Post    @relation(fields: [postId], references: [id])
  postId Int
  text   String?
  delete Boolean @default(false)
}

//VIDEO
model Video {
  id          Int           @id @default(autoincrement())
  title       String?
  text        String?
  countLikes  Boolean       @default(false)
  countComent Boolean       @default(false)
  countWatch  Int           @default(0)
  imgAvatar   String?
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  delete      Boolean       @default(false)
  likes       LikeVideo[]
  cometns     ComentVideo[]
}

//VIDEO LIKE
model LikeVideo {
  id      Int     @id @default(autoincrement())
  user    User?   @relation(fields: [userId], references: [id])
  userId  Int
  video   Video?  @relation(fields: [videoId], references: [id])
  videoId Int
  delete  Boolean @default(false)
}

//VIDEO COMENT
model ComentVideo {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
  video   Video   @relation(fields: [videoId], references: [id])
  videoId Int
  text    String?
  delete  Boolean @default(false)
}

//FILES
model Files {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
  title    String?
  srcFiles String?
  dataFile String?
  sizeFile String?
  typeFile String?
}

enum Roles {
  USER
  ADMIN
  MODERATOR
}
